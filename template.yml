kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: APP
    required: true
    value: haahka
  - name: BRANCH
    required: true
  - name: API
    required: true
    value: plumber
  - name: PAGE_TITLE
    required: true
    value: Haahka
  - name: DB
    required: true
    value: postgres
  - name: DB_PATH
    required: true
    value: /var/lib/postgresql/data
  - name: DB_DATA
    required: true
    value: /pgdata
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$POSTGRES_PASSWORD
        psql -h 0.0.0.0 -U postgres -d postgres -c \"SELECT 1\""
    ]'
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_PASSWORD
    required: true
  - name: STORAGE
    required: true
    value: "20Gi"
  - name: SMALL_STORAGE
    required: true
    value: "3Gi"
  - name: ACCESS_MODE
    required: true
    value: ReadWriteOnce
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: FINBIF_ACCESS_TOKEN
    required: true
  - name: FINBIF_API_URL
    required: true
  - name: FINBIF_EMAIL
    required: true
  - name: FINBIF_WAREHOUSE
    required: true
  - name: APP_PORT
    required: true
    value: "3838"
  - name: API_PORT
    required: true
    value: "8000"
  - name: APP_HEALTH
    required: true
    value: /robots.txt
  - name: API_HEALTH
    required: true
    value: /api/healthz
  - name: LIVENESS_PERIOD
    required: true
    value: "30"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: SMTP_SERVER
    required: true
  - name: SMTP_PORT
    required: true
  - name: ERROR_EMAIL_FROM
    required: true
  - name: HOST
    required: true
  - name: JOB_SECRET
    required: true
  - name: RCLONE_ACCESS_KEY_ID
    required: true
  - name: RCLONE_SECRET_ACCESS_KEY
    required: true
  - name: OBJECT_STORE
    required: true
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${API}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${SMALL_STORAGE}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  data:
    branch: ${BRANCH}
    db_port: ${DB_PORT}
    app_port: ${APP_PORT}
    api_port: ${API_PORT}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    db_password: ${DB_PASSWORD}
    finbif_access_token: ${FINBIF_ACCESS_TOKEN}
    rclone_access_key_id: ${RCLONE_ACCESS_KEY_ID}
    rclone_secret_access_key: ${RCLONE_SECRET_ACCESS_KEY}
    job_secret: ${JOB_SECRET}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${APP_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          imagePullPolicy: Always
          name: ${APP}-${BRANCH}
          command:
          - 'R'
          - '-s'
          - '-e'
          - >-
            options(shiny.autoload.r = FALSE, shiny.port = 3838);
            library(shiny, warn.conflicts = FALSE, quietly = TRUE);
            runApp("app.R", host = "0.0.0.0", quiet = TRUE)
          env:
          - name: PGHOST
            value: ${DB}-${BRANCH}
          - name: PGPORT
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: db_port
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          - name: DB_NAME
            value: ${DB}
          - name: API_HOSTNAME
            value: ${API}-${BRANCH}
          - name: API_PORT
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: api_port
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: STATUS_DIR
            value: var/status
          - name: LOG_DIR
            value: var/logs
          ports:
          - containerPort: ${{APP_PORT}}
          startupProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
        resources:
          limits:
            cpu: "500m"
            memory: "2Gi"
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${API_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          imagePullPolicy: Always
          name: ${API}-${BRANCH}
          volumeMounts:
          - mountPath: /home/user/var
            name: ${API}-${BRANCH}
          env:
          - name: FINBIF_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: finbif_access_token
          - name: FINBIF_API_URL
            value: ${FINBIF_API_URL}
          - name: FINBIF_WAREHOUSE
            value: ${FINBIF_WAREHOUSE}
          - name: FINBIF_EMAIL
            value: ${FINBIF_EMAIL}
          - name: JOB_SECRET
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: job_secret
          - name: PGHOST
            value: ${DB}-${BRANCH}
          - name: PGPORT
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: db_port
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          - name: DB_NAME
            value: ${DB}
          - name: PAGE_TITLE
            value: ${PAGE_TITLE}
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: FINBIF_USER_AGENT
            value: https://github.com/luomus/${APP}.git
          - name: STATUS_DIR
            value: var/status
          - name: LOG_DIR
            value: var/logs
          - name: SMTP_SERVER
            value: ${SMTP_SERVER}
          - name: SMTP_PORT
            value: ${SMTP_PORT}
          - name: ERROR_EMAIL_TO
            value: ${FINBIF_EMAIL}
          - name: ERROR_EMAIL_FROM
            value: ${ERROR_EMAIL_FROM}
          - name: OBJECT_STORE
            value: ${OBJECT_STORE}
          - name: RCLONE_CONFIG_DEFAULT_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_access_key_id
          - name: RCLONE_CONFIG_DEFAULT_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_secret_access_key
          ports:
          - containerPort: ${{API_PORT}}
          startupProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
        volumes:
        - name: ${API}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${API}-${BRANCH}
        resources:
          limits:
            cpu: "500m"
            memory: "2Gi"
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${DB_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/postgis-image:main
          imagePullPolicy: Always
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: ${DB_PATH}
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          startupProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PGDATA
            value: ${DB_PATH}${DB_DATA}
          - name: POSTGRES_DB
            value: ${DB}
          - name: POSTGRES_PORT
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: db_port
          - name: POSTGRES_USER
            value: ${DB}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${APP_PORT}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${API_PORT}
      port: ${{API_PORT}}
      targetPort: ${{API_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${API_PORT}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${DB_PORT}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{APP_PORT}}
    tls:
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${APP}-${BRANCH}
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    path: /api
    port:
      targetPort: ${{API_PORT}}
    tls:
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${API}-${BRANCH}
    wildcardPolicy: None
- kind: CronJob
  apiVersion: batch/v1
  metadata:
    name: ${APP}-${BRANCH}
  spec:
    schedule:  "0 20 * * *"
    concurrencyPolicy: "Forbid"
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 3
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${APP}-${BRANCH}
              # docker manifest inspect docker.io/redhat/ubi9:9.4 -v | jq '.[0].Descriptor.digest'
              image: docker.io/redhat/ubi9:9.4@sha256:c532187e38fcf6849fae56decd0c58b5ef87b47bfaf24ad9e092cf4c9106f577
              command:
                - 'sh'
                - '-c'
                - >-
                  curl -s -w '%{stderr} Code: %{response_code} URL: %{url_effective}\n'
                  $API_HOSTNAME:$API_PORT/api/job?secret=$JOB_SECRET
              env:
              - name: JOB_SECRET
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: job_secret
              - name: API_HOSTNAME
                value: ${API}-${BRANCH}
              - name: API_PORT
                value: ${API_PORT}
              resources:
                limits:
                  cpu: "100m"
                  memory: "100Mi"
            restartPolicy: Never
